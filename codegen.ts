import {
  isComment,
  parse,
} from "https://raw.githubusercontent.com/ppdx999/deno-env-parser/main/mod.ts";

export type Type = "deno" | "node";

const getEnvFuncName = "getEnv";
const genGetEnvCode = (type: Type) =>
  `const ${getEnvFuncName} = (key: string) => {
  const val = ${type === "deno" ? "Deno.env.get(key)" : "process.env[key]"};
  if (val === undefined) {
    throw new Error(\`Environment variable "\${key}" is not defined\`);
  }
  return val;
};`;

const toNumberFuncName = "toNumber";
const genToNumberCode = `const ${toNumberFuncName} = (val: string) => {
  return Number(val);
};`;

const toBooleanFuncName = "toBoolean";
const genToBooleanCode = `const ${toBooleanFuncName} = (val: string) => {
  return val === "true";
};`;

const genDefineKeyCode = (key: string, type: string) =>
  type === "number"
    ? `export const ${key} = ${toNumberFuncName}(${getEnvFuncName}("${key}"));\n`
    : type === "boolean"
    ? `export const ${key} = ${toBooleanFuncName}(${getEnvFuncName}("${key}"));\n`
    : `export const ${key} = ${getEnvFuncName}("${key}");\n`;

const removeTrailNewLine = (text: string) => {
  for (let i = text.length - 1; i >= 0; i--) {
    if (text[i] !== "\n") {
      return text.slice(0, i + 1);
    }
  }
  return "";
};

export type Options = {
  type: Type;
};

export const genCode = (options: Options) => (text: string) => {
  const env = parse(text);

  let output = `/************************************
* This file is generated by deno-env-codegen
************************************/

${genGetEnvCode(options.type)}

${genToNumberCode}

${genToBooleanCode}

`;

  for (const line of env) {
    if (isComment(line)) {
      const trimmed = line.replace(/^#/, "").trim();
      if (trimmed === "") {
        output += "\n";
      } else {
        output += `// ${trimmed}\n`;
      }
    } else {
      const [key, value] = line;
      output += genDefineKeyCode(key, typeof value);
    }
  }

  return removeTrailNewLine(output);
};
