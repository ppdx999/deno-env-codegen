import { assertEquals } from "https://deno.land/std@0.198.0/assert/mod.ts";
import { genCode } from "./codegen.ts";

const fixture = `# this is a comment
str="value"
nospace=nospace

# a few blank lines

is_true=true
is_false=false
num=123
zero=0
str_start_zero=0123
`;

const denoExpected = `/************************************
* This file is generated by deno-env-parser
************************************/

const getEnv = (key: string) => {
  const val = Deno.env.get(key);
  if (val === undefined) {
    throw new Error(\`Environment variable "\${key}" is not defined\`);
  }
  return val;
};

const toNumber = (val: string) => {
  return Number(val);
};

const toBoolean = (val: string) => {
  return val === "true";
};

// this is a comment
export const str = getEnv("str");
export const nospace = getEnv("nospace");

// a few blank lines

export const is_true = toBoolean(getEnv("is_true"));
export const is_false = toBoolean(getEnv("is_false"));
export const num = toNumber(getEnv("num"));
export const zero = toNumber(getEnv("zero"));
export const str_start_zero = getEnv("str_start_zero");`;

const nodeExpected = `/************************************
* This file is generated by deno-env-parser
************************************/

const getEnv = (key: string) => {
  const val = process.env[key];
  if (val === undefined) {
    throw new Error(\`Environment variable "\${key}" is not defined\`);
  }
  return val;
};

const toNumber = (val: string) => {
  return Number(val);
};

const toBoolean = (val: string) => {
  return val === "true";
};

// this is a comment
export const str = getEnv("str");
export const nospace = getEnv("nospace");

// a few blank lines

export const is_true = toBoolean(getEnv("is_true"));
export const is_false = toBoolean(getEnv("is_false"));
export const num = toNumber(getEnv("num"));
export const zero = toNumber(getEnv("zero"));
export const str_start_zero = getEnv("str_start_zero");`;

Deno.test("genCode", async (t) => {
  await t.step("node", () => {
    const output = genCode({ type: "node" })(fixture);
    assertEquals(output, nodeExpected);
  });

  await t.step("deno", () => {
    const output = genCode({ type: "deno" })(fixture);
    assertEquals(output, denoExpected);
  });
});
